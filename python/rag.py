###############################################################################################
#
# Script: simple_rag_example.py
# Author: Your Name
# Date: 2024-10-04
#
# Description: This script demonstrates a simple Retrieval-Augmented Generation (RAG) process.
#
# Operations:
# - Defines a knowledge base (dictionary)
# - Retrieves information based on user queries
# - Generates a response based on retrieved information
#
# Usage: Run the script, and input queries to retrieve and generate responses.
# 
# Note: This is a simplified example for educational purposes. In a real RAG model,
#       you'd use a sophisticated retriever and generative language model.
###############################################################################################

# Simple knowledge base (a dictionary with facts)
knowledge_base = {
    "What is Python?": "Python is a high-level, interpreted programming language.",
    "Who developed Python?": "Python was developed by Guido van Rossum and first released in 1991.",
    "What is RAG?": "RAG stands for Retrieval-Augmented Generation, a method that combines retrieving information and generating text."
}

def retrieve_information(query):
    """
    Simulates retrieving information from a knowledge base based on a query.
    
    Args:
        query (str): The user's input query.
    
    Returns:
        str: The relevant information from the knowledge base if found, otherwise a fallback message.
    """
    return knowledge_base.get(query, "Sorry, I don't have information on that topic.")

def generate_response(retrieved_info):
    """
    Simulates generating a response based on the retrieved information.
    
    Args:
        retrieved_info (str): The information retrieved from the knowledge base.
    
    Returns:
        str: A generated response using the retrieved information.
    """
    return f"Based on the information I found: {retrieved_info}"

def rag_process(query):
    """
    Orchestrates the RAG process by first retrieving information and then generating a response.
    
    Args:
        query (str): The user's input query.
    
    Returns:
        str: The final response generated by the RAG model.
    """
    retrieved_info = retrieve_information(query)
    response = generate_response(retrieved_info)
    return response

# Main function to simulate user queries
def main():
    print("Welcome to the simple RAG example!")
    print("Ask me a question, and I'll try to retrieve relevant information and generate a response.")
    print("Type 'exit' to quit.\n")
    
    while True:
        # Get input from user
        user_query = input("Your query: ")
        
        if user_query.lower() == 'exit':
            print("Goodbye!")
            break
        
        # Perform RAG process and print the response
        response = rag_process(user_query)
        print(response + "\n")

# Entry point of the script
if __name__ == "__main__":
    main()